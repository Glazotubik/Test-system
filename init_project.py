#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ - —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
"""

import os
import json

def create_theme_file():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ —Ç–µ–º—ã"""
    theme_data = {
        "id": "fap297",
        "name": "–§–ê–ü 297", 
        "description": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–≤ –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –∞–≤–∏–∞—Ü–∏–∏",
        "questions": [
            {
                "id": 1,
                "type": "single_choice",
                "question": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ–ª–µ—Ç–∞ –Ω–∞–¥ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–æ–º:",
                "options": ["300 –º–µ—Ç—Ä–æ–≤", "500 –º–µ—Ç—Ä–æ–≤", "1000 –º–µ—Ç—Ä–æ–≤", "1500 –º–µ—Ç—Ä–æ–≤"],
                "correct": "1000 –º–µ—Ç—Ä–æ–≤",
                "explanation": "–°–æ–≥–ª–∞—Å–Ω–æ –§–ê–ü 297, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ–ª–µ—Ç–∞ –Ω–∞–¥ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1000 –º–µ—Ç—Ä–æ–≤.",
                "category": "–í—ã—Å–æ—Ç—ã –∏ —ç—à–µ–ª–æ–Ω—ã"
            }
        ]
    }
    
    themes_dir = os.path.join(os.path.dirname(__file__), "themes")
    os.makedirs(themes_dir, exist_ok=True)
    
    theme_path = os.path.join(themes_dir, "fap297.json")
    with open(theme_path, 'w', encoding='utf-8') as f:
        json.dump(theme_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Ç–µ–º—ã: {theme_path}")

def create_template_files():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–±–ª–æ–Ω—ã"""
    templates_dir = os.path.join(os.path.dirname(__file__), "templates")
    os.makedirs(templates_dir, exist_ok=True)
    
    # –®–∞–±–ª–æ–Ω—ã —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
    question_types = {
        "single_choice": {
            "name": "–û–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
            "description": "–í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö",
            "template": {
                "type": "single_choice",
                "question": "",
                "options": [],
                "correct": "",
                "explanation": "",
                "category": ""
            }
        },
        "multiple_choice": {
            "name": "–ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", 
            "description": "–í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            "template": {
                "type": "multiple_choice",
                "question": "",
                "options": [],
                "correct": [],
                "explanation": "",
                "category": ""
            }
        }
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
    }
    
    template_path = os.path.join(templates_dir, "question_types.json")
    with open(template_path, 'w', encoding='utf-8') as f:
        json.dump(question_types, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤: {template_path}")

if __name__ == "__main__":
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞...")
    create_theme_file()
    create_template_files()
    print("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    print("üìÅ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: streamlit run main.py")