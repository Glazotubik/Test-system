# /home/maksim/–î–æ–∫—É–º–µ–Ω—Ç—ã/DMA/fap_test_system/main.py
import streamlit as st
import random
import sys
import os
import time
from datetime import datetime
from fpdf import FPDF

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))
from theme_loader import scan_themes, get_categories_for_theme

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–¢–µ—Å—Ç—ã –ø–æ –§–ê–ü - –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è",
    page_icon="‚úàÔ∏è",
    layout="wide"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º
@st.cache_data
def load_themes():
    return scan_themes()

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    default_state = {
        'test_started': False,
        'test_finished': False,
        'current_question': 0,
        'score': 0,
        'user_answers': {},
        'show_results': False,
        'selected_questions': [],
        'selected_theme': None,
        'test_config': {'category': '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'num_questions': 5},
        'question_start_time': None,
        'question_times': [],
        'answers_checked': {},
        'question_scores': {},
        'user_info': None,
        'user_logged_in': False
    }
    
    for key, value in default_state.items():
        if key not in st.session_state:
            st.session_state[key] = value

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã)"""
    seconds_rounded = round(seconds)
    minutes = seconds_rounded // 60
    seconds_display = seconds_rounded % 60
    return f"{minutes:02d}:{seconds_display:02d}"

def calculate_partial_score(question, user_answer):
    """–†–∞—Å—á–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    if question["type"] == "single_choice":
        return 1.0 if user_answer == question["correct"] else 0.0
    
    elif question["type"] == "multiple_choice":
        user_set = set(user_answer or [])
        correct_set = set(question["correct"])
        
        if not user_set:
            return 0.0
            
        correct_answers = len(user_set & correct_set)
        wrong_answers = len(user_set - correct_set)
        total_possible = len(correct_set)
        
        score = max(0, (correct_answers - wrong_answers)) / total_possible
        return round(score, 2)
    
    elif question["type"] == "matching":
        if not user_answer:
            return 0.0
            
        correct_count = 0
        total_pairs = len(question['correct_mapping'])
        
        for left_item, correct_right in question['correct_mapping'].items():
            if user_answer.get(left_item) == correct_right:
                correct_count += 1
        
        return round(correct_count / total_pairs, 2)
    
    elif question["type"] == "dropdown":
        return 1.0 if user_answer == question["correct"] else 0.0
    
    elif question["type"] == "double_dropdown":
        if not user_answer:
            return 0.0
            
        correct_count = 0
        total_subquestions = len(question["subquestions"])
        
        for subq in question["subquestions"]:
            if user_answer.get(subq["key"]) == subq["correct"]:
                correct_count += 1
        
        return round(correct_count / total_subquestions, 2)
    
    elif question["type"] == "ordering":
        if not user_answer:
            return 0.0
            
        data = user_answer
        user_sequence = []
        for idx, item in enumerate(data["items"]):
            user_sequence.append((data["user_order"][idx], item))
        
        user_sequence.sort()
        user_order = [item for _, item in user_sequence]
        correct_order = question["correct_order"]
        
        if len(user_order) != len(correct_order):
            return 0.0
            
        correct_positions = 0
        for i in range(len(user_order)):
            if user_order[i] == correct_order[i]:
                correct_positions += 1
        
        return round(correct_positions / len(correct_order), 2)
    
    return 0.0

def check_answer(question, answer_key):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —á–∞—Å—Ç–∏—á–Ω—ã—Ö –±–∞–ª–ª–æ–≤"""
    user_answer = st.session_state.user_answers.get(answer_key)
    if user_answer is None:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç!")
        return False
    
    score = calculate_partial_score(question, user_answer)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–ª –∑–∞ –≤–æ–ø—Ä–æ—Å
    st.session_state.question_scores[answer_key] = score
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
    st.session_state.score += score
    
    # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω
    st.session_state.answers_checked[answer_key] = True
    
    # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if score == 1.0:
        st.success("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª–Ω—ã–π –±–∞–ª–ª!")
    elif score >= 0.7:
        st.success(f"‚úÖ –•–æ—Ä–æ—à–æ! {score:.2f} –±–∞–ª–ª–∞ –∏–∑ 1.00")
    elif score >= 0.5:
        st.warning(f"‚ö†Ô∏è –ù–µ–ø–ª–æ—Ö–æ! {score:.2f} –±–∞–ª–ª–∞ –∏–∑ 1.00")
    elif score > 0:
        st.warning(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ! {score:.2f} –±–∞–ª–ª–∞ –∏–∑ 1.00")
    else:
        st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! 0.00 –±–∞–ª–ª–æ–≤")
    
    st.info(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
    
    return True

def get_answer_key(question):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –æ—Ç–≤–µ—Ç–∞"""
    type_map = {
        "single_choice": "single",
        "multiple_choice": "multiple", 
        "dropdown": "dropdown",
        "double_dropdown": "double",
        "ordering": "ordering",
        "matching": "matching"
    }
    return f"q_{question['id']}_{type_map[question['type']]}"

def render_login_form():
    """–§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    st.header("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
    
    with st.form("user_login"):
        col1, col2 = st.columns(2)
        
        with col1:
            last_name = st.text_input("–§–∞–º–∏–ª–∏—è:*", placeholder="–ò–≤–∞–Ω–æ–≤")
            first_name = st.text_input("–ò–º—è:*", placeholder="–ò–≤–∞–Ω")
        
        with col2:
            middle_name = st.text_input("–û—Ç—á–µ—Å—Ç–≤–æ:", placeholder="–ò–≤–∞–Ω–æ–≤–∏—á")
            position = st.text_input("–î–æ–ª–∂–Ω–æ—Å—Ç—å:*", placeholder="–¢–µ—Ö–Ω–∏–∫ –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
        
        st.markdown("**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç–º–µ—á–µ–Ω—ã –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*)**")
        
        if st.form_submit_button("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", type="primary", use_container_width=True):
            if last_name.strip() and first_name.strip() and position.strip():
                st.session_state.user_info = {
                    'last_name': last_name.strip(),
                    'first_name': first_name.strip(), 
                    'middle_name': middle_name.strip(),
                    'position': position.strip(),
                    'login_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                st.session_state.user_logged_in = True
                st.rerun()
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
def render_question_selection():
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞"""
    st.write("### üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞")
    
    themes = load_themes()
    if not themes:
        st.error("‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–º—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.")
        return
    
    # –í—ã–±–æ—Ä –§–ê–ü
    theme_options = {theme_id: f"{data['name']} - {data['description']}" 
                    for theme_id, data in themes.items()}
    selected_theme_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        options=list(theme_options.keys()),
        format_func=lambda x: theme_options[x]
    )
    
    st.session_state.selected_theme = themes[selected_theme_id]
    
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = ["–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"] + get_categories_for_theme(themes, selected_theme_id)
    selected_category = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:",
        categories
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    theme_questions = st.session_state.selected_theme["questions"]
    if selected_category != "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        theme_questions = [q for q in theme_questions if q.get('category') == selected_category]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    if len(theme_questions) == 0:
        st.warning("‚ö†Ô∏è –í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
        num_questions = 0
    elif len(theme_questions) == 1:
        st.write(f"**–ë—É–¥–µ—Ç –∑–∞–¥–∞–Ω 1 –≤–æ–ø—Ä–æ—Å**")
        num_questions = 1
    else:
        num_questions = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ:",
            min_value=1,
            max_value=len(theme_questions),
            value=min(10, len(theme_questions))
        )
    
    st.session_state.test_config = {
        'category': selected_category,
        'num_questions': num_questions
    }
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    if len(theme_questions) > 0:
        if st.button("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", type="primary", use_container_width=True):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            if len(theme_questions) == 1:
                selected_questions = theme_questions
            else:
                selected_questions = random.sample(theme_questions, num_questions)
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            random.shuffle(selected_questions)
            
            st.session_state.selected_questions = selected_questions
            st.session_state.test_started = True
            st.session_state.current_question = 0
            st.session_state.score = 0
            st.session_state.user_answers = {}
            st.session_state.answers_checked = {}
            st.session_state.question_times = [0] * len(selected_questions)
            st.session_state.question_scores = {}
            st.session_state.question_start_time = time.time()
            
            # –°–û–•–†–ê–ù–Ø–ï–ú –¢–ï–ö–£–©–ò–ô –¢–ï–°–¢ –î–õ–Ø –í–û–ó–ú–û–ñ–ù–û–ì–û –ü–û–í–¢–û–†–ï–ù–ò–Ø
            # –≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
            st.session_state.last_test_questions = selected_questions.copy()
            st.session_state.last_test_theme = st.session_state.selected_theme
            
            st.rerun()
    else:
        st.button("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", disabled=True, use_container_width=True, 
                 help="–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

def update_question_time():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    if (st.session_state.test_started and not st.session_state.test_finished and 
        st.session_state.question_start_time is not None):
        current_time = time.time()
        elapsed = current_time - st.session_state.question_start_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –º–∞—Å—Å–∏–≤–µ
        q_index = st.session_state.current_question
        if q_index < len(st.session_state.question_times):
            st.session_state.question_times[q_index] = elapsed

def render_single_choice_question(question, q_index):
    """–í–æ–ø—Ä–æ—Å —Å –æ–¥–Ω–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º"""
    st.subheader(f"‚ùì –í–æ–ø—Ä–æ—Å {q_index + 1}")
    st.write(f"**{question['question']}**")
    
    answer_key = f"q_{question['id']}_single"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    if answer_key not in st.session_state.user_answers:
        st.session_state.user_answers[answer_key] = None
    
    options = question["options"]
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if st.session_state.answers_checked.get(answer_key, False):
        selected = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            options,
            index=options.index(st.session_state.user_answers[answer_key]) if st.session_state.user_answers[answer_key] in options else 0,
            key=f"locked_{question['id']}",
            disabled=True
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        score = st.session_state.question_scores.get(answer_key, 0)
        if score == 1.0:
            st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}")
        st.info(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
    else:
        selected = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            options,
            key=f"single_{question['id']}"
        )
        st.session_state.user_answers[answer_key] = selected
    
    render_navigation_buttons(question, q_index, answer_key)

def render_multiple_choice_question(question, q_index):
    """–í–æ–ø—Ä–æ—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    st.subheader(f"‚ùì –í–æ–ø—Ä–æ—Å {q_index + 1}")
    st.write(f"**{question['question']}**")
    st.write("*–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:*")
    
    answer_key = f"q_{question['id']}_multiple"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    if answer_key not in st.session_state.user_answers:
        st.session_state.user_answers[answer_key] = []
    
    options = question["options"]
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if st.session_state.answers_checked.get(answer_key, False):
        selected_options = st.session_state.user_answers[answer_key]
        
        for i, option in enumerate(options):
            is_checked = option in selected_options
            st.checkbox(option, value=is_checked, disabled=True, key=f"locked_multi_{question['id']}_{i}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        score = st.session_state.question_scores.get(answer_key, 0)
        if score == 1.0:
            st.success("‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!")
        else:
            st.error("‚ùå –ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!")
        st.info(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
    else:
        selected_options = []
        for i, option in enumerate(options):
            if st.checkbox(option, key=f"multi_{question['id']}_{i}"):
                selected_options.append(option)
        
        st.session_state.user_answers[answer_key] = selected_options
    
    render_navigation_buttons(question, q_index, answer_key)

def render_dropdown_question(question, q_index):
    """–í–æ–ø—Ä–æ—Å —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º"""
    st.subheader(f"‚ùì –í–æ–ø—Ä–æ—Å {q_index + 1}")
    st.write(f"**{question['question']}**")
    
    answer_key = f"q_{question['id']}_dropdown"
    
    if answer_key not in st.session_state.user_answers:
        st.session_state.user_answers[answer_key] = None
    
    options = ["–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç..."] + question["options"]
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if st.session_state.answers_checked.get(answer_key, False):
        selected = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            options,
            index=options.index(st.session_state.user_answers[answer_key]) if st.session_state.user_answers[answer_key] in options else 0,
            key=f"locked_drop_{question['id']}",
            disabled=True
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        score = st.session_state.question_scores.get(answer_key, 0)
        if score == 1.0:
            st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}")
        st.info(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
    else:
        selected = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            options,
            key=f"drop_{question['id']}"
        )
        
        if selected != "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç...":
            st.session_state.user_answers[answer_key] = selected
    
    render_navigation_buttons(question, q_index, answer_key)
def render_matching_question(question, q_index):
    """–í–µ—Ä—Å–∏—è matching –≤–æ–ø—Ä–æ—Å–∞ —Å –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    answer_key = f"q_{question['id']}_matching"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if answer_key not in st.session_state.user_answers:
        st.session_state.user_answers[answer_key] = {}
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
    right_options = question['right_column'].copy()
    random.shuffle(right_options)
    
    st.subheader(f"üîó –í–æ–ø—Ä–æ—Å {q_index + 1}")
    st.write(f"**{question['question']}**")
    
    answer_key = f"q_{question['id']}_matching"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if answer_key not in st.session_state.user_answers:
        st.session_state.user_answers[answer_key] = {}
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    right_options = question['right_column'].copy()
    random.shuffle(right_options)
    
    st.write("---")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    all_answered = True
    any_changes = False
    is_checked = st.session_state.answers_checked.get(answer_key, False)
    
    for i, left_item in enumerate(question['left_column']):
        col1, col2 = st.columns([2, 3])
        
        with col1:
            st.write(f"**{left_item}**")
        
        with col2:
            current_value = st.session_state.user_answers[answer_key].get(left_item, "–í—ã–±–µ—Ä–∏—Ç–µ...")
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è selectbox
            select_key = f"match_{question['id']}_{i}_{q_index}"
            if select_key not in st.session_state:
                st.session_state[select_key] = current_value
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
            if is_checked:
                st.selectbox(
                    f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {left_item}:",
                    options=["–í—ã–±–µ—Ä–∏—Ç–µ..."] + right_options,
                    index=right_options.index(current_value) + 1 if current_value in right_options else 0,
                    key=f"locked_{select_key}",
                    disabled=True,
                    label_visibility="collapsed"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫ –≤ single_choice
                user_answer = st.session_state.user_answers[answer_key].get(left_item, "–í—ã–±–µ—Ä–∏—Ç–µ...")
                correct_answer = question['correct_mapping'][left_item]
                
                if user_answer == correct_answer:
                    st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                else:
                    st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
                    
            else:
                # –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
                selected = st.selectbox(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {left_item}:",
                    options=["–í—ã–±–µ—Ä–∏—Ç–µ..."] + right_options,
                    index=right_options.index(st.session_state[select_key]) + 1 if st.session_state[select_key] in right_options else 0,
                    key=select_key,
                    label_visibility="collapsed"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º session_state –¥–ª—è selectbox
                if selected != st.session_state[select_key]:
                    st.session_state[select_key] = selected
                    any_changes = True
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if selected != current_value:
                    st.session_state.user_answers[answer_key][left_item] = selected
                    any_changes = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç
            if st.session_state.user_answers[answer_key].get(left_item, "–í—ã–±–µ—Ä–∏—Ç–µ...") == "–í—ã–±–µ—Ä–∏—Ç–µ...":
                all_answered = False
        
        st.write("---")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π rerun –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    if any_changes:
        st.rerun()
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–∫–∞–∫ –≤ single_choice)
    if is_checked:
        score = st.session_state.question_scores.get(answer_key, 0)
        
        # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∫–∞–∫ –≤ single_choice
        if score == 1.0:
            st.success("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª–Ω—ã–π –±–∞–ª–ª!")
        elif score >= 0.7:
            st.success(f"‚úÖ –•–æ—Ä–æ—à–æ! {score:.2f} –±–∞–ª–ª–∞ –∏–∑ 1.00")
        elif score >= 0.5:
            st.warning(f"‚ö†Ô∏è –ù–µ–ø–ª–æ—Ö–æ! {score:.2f} –±–∞–ª–ª–∞ –∏–∑ 1.00")
        elif score > 0:
            st.warning(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ! {score:.2f} –±–∞–ª–ª–∞ –∏–∑ 1.00")
        else:
            st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! 0.00 –±–∞–ª–ª–æ–≤")
        
        st.info(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
    
    render_navigation_buttons(question, q_index, answer_key, all_answered)

def render_double_dropdown_question(question, q_index):
    """–í–æ–ø—Ä–æ—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤—ã–ø–∞–¥–∞—é—â–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏"""
    st.subheader(f"‚ùì –í–æ–ø—Ä–æ—Å {q_index + 1}")
    st.write(f"**{question['question']}**")
    
    answer_key = f"q_{question['id']}_double"
    
    if answer_key not in st.session_state.user_answers:
        st.session_state.user_answers[answer_key] = {}
        for subq in question["subquestions"]:
            st.session_state.user_answers[answer_key][subq["key"]] = None
    
    st.write("---")
    
    all_answered = True
    is_checked = st.session_state.answers_checked.get(answer_key, False)
    
    for subq in question["subquestions"]:
        st.write(f"**{subq['text']}**")
        
        options = ["–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç..."] + subq["options"]
        
        if is_checked:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            selected = st.selectbox(
                "",
                options,
                index=options.index(st.session_state.user_answers[answer_key][subq["key"]]) if st.session_state.user_answers[answer_key][subq["key"]] in options else 0,
                key=f"locked_double_{question['id']}_{subq['key']}",
                disabled=True,
                label_visibility="collapsed"
            )
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞
            user_ans = st.session_state.user_answers[answer_key][subq["key"]]
            if user_ans == subq["correct"]:
                st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {user_ans}")
            else:
                st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç: {user_ans}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {subq['correct']}")
        else:
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
            selected = st.selectbox(
                "",
                options,
                key=f"double_{question['id']}_{subq['key']}",
                label_visibility="collapsed"
            )
            
            if selected != "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç...":
                st.session_state.user_answers[answer_key][subq["key"]] = selected
            else:
                all_answered = False
        
        st.write("")
    
    st.write("---")
    
    if is_checked:
        st.info(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
    
    render_navigation_buttons(question, q_index, answer_key, all_answered if not is_checked else True)

def render_ordering_question(question, q_index):
    """–í–æ–ø—Ä–æ—Å –Ω–∞ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ"""
    st.subheader(f"‚ùì –í–æ–ø—Ä–æ—Å {q_index + 1}")
    st.write(f"**{question['question']}**")
    st.write("*–ü—Ä–æ–Ω—É–º–µ—Ä—É–π—Ç–µ —ç—Ç–∞–ø—ã –æ—Ç 1 (–ø–µ—Ä–≤—ã–π) –¥–æ 4 (–ø–æ—Å–ª–µ–¥–Ω–∏–π)*")
    
    answer_key = f"q_{question['id']}_ordering"
    
    if answer_key not in st.session_state.user_answers:
        shuffled_items = question["items"].copy()
        random.shuffle(shuffled_items)
        st.session_state.user_answers[answer_key] = {
            "items": shuffled_items,
            "user_order": [i+1 for i in range(len(shuffled_items))]
        }
    
    data = st.session_state.user_answers[answer_key]
    is_checked = st.session_state.answers_checked.get(answer_key, False)
    
    st.write("---")
    for i, item in enumerate(data["items"]):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**{item}**")
        with col2:
            if is_checked:
                st.number_input(
                    f"–ü–æ—Ä—è–¥–æ–∫",
                    value=data["user_order"][i],
                    key=f"locked_order_{question['id']}_{i}",
                    disabled=True
                )
            else:
                order = st.number_input(
                    f"–ü–æ—Ä—è–¥–æ–∫",
                    min_value=1,
                    max_value=len(data["items"]),
                    value=data["user_order"][i],
                    key=f"order_{question['id']}_{i}"
                )
                data["user_order"][i] = order
    
    st.write("---")
    
    if is_checked:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        score = st.session_state.question_scores.get(answer_key, 0)
        if score == 1.0:
            st.success("‚úÖ –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!")
        else:
            st.error("‚ùå –ü–æ—Ä—è–¥–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!")
        st.info(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
    
    render_navigation_buttons(question, q_index, answer_key)

def render_navigation_buttons(question, q_index, answer_key, all_answered=True):
    """–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        if q_index > 0:
            if st.button("‚Üê –ù–∞–∑–∞–¥", key=f"back_{question['id']}"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                update_question_time()
                st.session_state.current_question = q_index - 1
                st.session_state.question_start_time = time.time()
                st.rerun()
    
    with col2:
        is_checked = st.session_state.answers_checked.get(answer_key, False)
        
        if not is_checked:
            check_enabled = all_answered
            if question["type"] in ["single_choice", "multiple_choice", "dropdown"]:
                check_enabled = st.session_state.user_answers.get(answer_key) is not None
                if question["type"] == "multiple_choice":
                    check_enabled = len(st.session_state.user_answers.get(answer_key, [])) > 0
            
            if check_enabled:
                if st.button("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç", type="primary", key=f"check_{question['id']}"):
                    if check_answer(question, answer_key):
                        st.rerun()
            else:
                st.button("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç", disabled=True, key=f"check_disabled_{question['id']}")
        else:
            st.button("‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω", disabled=True, key=f"checked_{question['id']}")
    
    with col3:
        if q_index < len(st.session_state.selected_questions) - 1:
            if st.button("–î–∞–ª–µ–µ ‚Üí", key=f"next_{question['id']}"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
                update_question_time()
                st.session_state.current_question = q_index + 1
                st.session_state.question_start_time = time.time()
                st.rerun()
        else:
            if st.button("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", type="secondary", key=f"finish_{question['id']}"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                update_question_time()
                st.session_state.show_results = True
                st.session_state.test_finished = True
                st.rerun()
def create_user_folder(user_info):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –§–ò–û –∏ –¥–∞—Ç—ã"""
    try:
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –§–ò–û –¥–ª—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
        last_name = user_info['last_name']
        first_name = user_info['first_name']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
        test_time = datetime.now()
        folder_time = test_time.strftime("%d_%m_%Y_%H_%M")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏
        folder_name = f"{last_name}_{first_name}_{folder_time}"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤ protocols
        protocols_dir = os.path.join(os.path.dirname(__file__), "protocols")
        user_folder = os.path.join(protocols_dir, folder_name)
        os.makedirs(user_folder, exist_ok=True)
        
        return user_folder
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

def generate_main_protocol(protocol_data, user_folder):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        user = protocol_data['user_info']
        results = protocol_data['results']
        
        text = f"""
–ü–†–û–¢–û–ö–û–õ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
=====================

–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {protocol_data['protocol_info']['generated_at']}

–î–ê–ù–ù–´–ï –¢–ï–°–¢–ò–†–£–ï–ú–û–ì–û:
-------------------
–§–ò–û: {user['last_name']} {user['first_name']} {user['middle_name']}
–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user['position']}
–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {user['login_time']}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–°–¢–ï:
------------------
–¢–µ–º–∞: {protocol_data['test_info']['theme']}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {protocol_data['test_info']['category']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {protocol_data['test_info']['total_questions']}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
-----------------------
–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {results['total_score']} –∏–∑ {results['max_score']}
–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results['percentage']}%
–û–±—â–µ–µ –≤—Ä–µ–º—è: {results['total_time_formatted']}
–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {results['average_time_formatted']}

–û–¶–ï–ù–ö–ê:
------
{"–û–¢–õ–ò–ß–ù–û - –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!" if results['percentage'] >= 80 else 
 "–•–û–†–û–®–û - –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞." if results['percentage'] >= 60 else 
 "–ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û - –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ."}

=====================
–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ.
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª
        filename = f"–ü—Ä–æ—Ç–æ–∫–æ–ª_—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è_{user['last_name']}_{user['first_name']}.txt"
        filepath = os.path.join(user_folder, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(text)
        
        return filepath
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        return None

def generate_detailed_statistics(protocol_data, user_folder):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        user = protocol_data['user_info']
        
        text = f"""
–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–û–ü–†–û–°–ê–ú
================================

–§–ò–û: {user['last_name']} {user['first_name']} {user['middle_name']}
–¢–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {protocol_data['test_info']['theme']}
–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {user['login_time']}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–û–ü–†–û–°–ê–ú:
======================
"""
        
        for i, detail in enumerate(protocol_data['detailed_results']):
            question = st.session_state.selected_questions[i]
            user_answer = st.session_state.user_answers.get(get_answer_key(question))
            
            text += f"""
–í–æ–ø—Ä–æ—Å {detail['question_number']}:
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë –ë–∞–ª–ª—ã: {detail['score']:.2f}/1.00
‚ïë –í—Ä–µ–º—è: {detail['time_formatted']}
‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ïë –í–û–ü–†–û–°: {question['question']}
‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
            if question['type'] == 'single_choice':
                text += f"‚ïë –í–ê–†–ò–ê–ù–¢–´: {', '.join(question['options'])}\n"
                text += f"‚ïë –í–ê–® –û–¢–í–ï–¢: {user_answer}\n"
                text += f"‚ïë –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢: {question['correct']}\n"
                text += f"‚ïë –°–¢–ê–¢–£–°: {'‚úÖ –í–ï–†–ù–û' if user_answer == question['correct'] else '‚ùå –ù–ï–í–ï–†–ù–û'}\n"
                
            elif question['type'] == 'multiple_choice':
                text += f"‚ïë –í–ê–†–ò–ê–ù–¢–´: {', '.join(question['options'])}\n"
                text += f"‚ïë –í–ê–®–ò –û–¢–í–ï–¢–´: {', '.join(user_answer) if user_answer else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}\n"
                text += f"‚ïë –ü–†–ê–í–ò–õ–¨–ù–´–ï –û–¢–í–ï–¢–´: {', '.join(question['correct'])}\n"
                user_set = set(user_answer or [])
                correct_set = set(question['correct'])
                if user_set == correct_set:
                    text += "‚ïë –°–¢–ê–¢–£–°: ‚úÖ –í–°–ï –û–¢–í–ï–¢–´ –í–ï–†–ù–´\n"
                else:
                    text += "‚ïë –°–¢–ê–¢–£–°: ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –í–ï–†–ù–û\n"
                    
            elif question['type'] == 'matching':
                text += "‚ïë –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:\n"
                for left_item in question['left_column']:
                    user_ans = user_answer.get(left_item, '–ù–µ –æ—Ç–≤–µ—Ç–∏–ª')
                    correct_ans = question['correct_mapping'][left_item]
                    is_correct = user_ans == correct_ans
                    status = '‚úÖ –í–ï–†–ù–û' if is_correct else '‚ùå –ù–ï–í–ï–†–ù–û'
                    text += f"‚ïë   ‚Ä¢ {left_item}: {user_ans} ‚Üí {correct_ans} ({status})\n"
                    
            elif question['type'] == 'dropdown':
                text += f"‚ïë –í–ê–†–ò–ê–ù–¢–´: {', '.join(question['options'])}\n"
                text += f"‚ïë –í–ê–® –û–¢–í–ï–¢: {user_answer}\n"
                text += f"‚ïë –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢: {question['correct']}\n"
                text += f"‚ïë –°–¢–ê–¢–£–°: {'‚úÖ –í–ï–†–ù–û' if user_answer == question['correct'] else '‚ùå –ù–ï–í–ï–†–ù–û'}\n"
                
            elif question['type'] == 'double_dropdown':
                text += "‚ïë –ü–û–î–í–û–ü–†–û–°–´:\n"
                for subq in question['subquestions']:
                    user_ans = user_answer.get(subq['key'], '–ù–µ –æ—Ç–≤–µ—Ç–∏–ª')
                    is_correct = user_ans == subq['correct']
                    status = '‚úÖ –í–ï–†–ù–û' if is_correct else '‚ùå –ù–ï–í–ï–†–ù–û'
                    text += f"‚ïë   ‚Ä¢ {subq['text']}: {user_ans} ‚Üí {subq['correct']} ({status})\n"
                    
            elif question['type'] == 'ordering':
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                data = user_answer
                user_sequence = []
                for idx, item in enumerate(data["items"]):
                    user_sequence.append((data["user_order"][idx], item))
                user_sequence.sort()
                user_order = [item for _, item in user_sequence]
                
                text += f"‚ïë –≠–õ–ï–ú–ï–ù–¢–´: {', '.join(question['items'])}\n"
                text += f"‚ïë –í–ê–® –ü–û–†–Ø–î–û–ö: {', '.join(user_order)}\n"
                text += f"‚ïë –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö: {', '.join(question['correct_order'])}\n"
                text += f"‚ïë –°–¢–ê–¢–£–°: {'‚úÖ –í–ï–†–ù–û' if user_order == question['correct_order'] else '‚ùå –ù–ï–í–ï–†–ù–û'}\n"
            
            text += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        
        text += "\n" + "="*70
        text += "\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ê–ü"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        filename = f"–î–µ—Ç–∞–ª—å–Ω–∞—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_{user['last_name']}_{user['first_name']}.txt"
        filepath = os.path.join(user_folder, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(text)
        
        return filepath
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

def generate_protocol_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    user_info = st.session_state.user_info
    total_questions = len(st.session_state.selected_questions)
    total_score = st.session_state.score
    max_possible_score = total_questions
    total_time = sum(st.session_state.question_times)
    percentage = (total_score / max_possible_score) * 100
    
    protocol = {
        "protocol_info": {
            "title": "–ü—Ä–æ—Ç–æ–∫–æ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "generated_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        },
        "user_info": user_info,
        "test_info": {
            "theme": st.session_state.selected_theme['name'],
            "total_questions": total_questions,
            "category": st.session_state.test_config['category']
        },
        "results": {
            "total_score": round(total_score, 2),
            "max_score": max_possible_score,
            "percentage": round(percentage, 1),
            "total_time_seconds": round(total_time),
            "total_time_formatted": format_time(total_time),
            "average_time_seconds": round(total_time / total_questions) if total_questions > 0 else 0,
            "average_time_formatted": format_time(total_time / total_questions) if total_questions > 0 else "00:00"
        },
        "detailed_results": []
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    for i, question in enumerate(st.session_state.selected_questions):
        answer_key = get_answer_key(question)
        question_time = st.session_state.question_times[i] if i < len(st.session_state.question_times) else 0
        question_score = st.session_state.question_scores.get(answer_key, 0)
        
        protocol["detailed_results"].append({
            "question_number": i + 1,
            "question_text": question['question'],
            "score": round(question_score, 2),
            "time_seconds": round(question_time),
            "time_formatted": format_time(question_time),
            "category": question.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        })
    
    return protocol

def render_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏"""
    st.balloons()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    if 'protocols_created' not in st.session_state:
        protocol_data = generate_protocol_data()
        user_folder = create_user_folder(protocol_data['user_info'])
        
        if user_folder:
            main_protocol_file = generate_main_protocol(protocol_data, user_folder)
            detailed_stats_file = generate_detailed_statistics(protocol_data, user_folder)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö
            st.session_state.protocols_created = True
            st.session_state.protocol_data = protocol_data
            st.session_state.protocol_files = {
                'main': main_protocol_file,
                'detailed': detailed_stats_file,
                'folder': user_folder
            }
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")
            return
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
        protocol_data = st.session_state.protocol_data
        main_protocol_file = st.session_state.protocol_files['main']
        detailed_stats_file = st.session_state.protocol_files['detailed']
        user_folder = st.session_state.protocol_files['folder']
    
    st.success("## üìã –ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    col1, col2 = st.columns(2)
    
    with col1:
        st.success("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
        if main_protocol_file:
            with open(main_protocol_file, "rb") as file:
                st.download_button(
                    label="üìÑ –°–∫–∞—á–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª",
                    data=file,
                    file_name=os.path.basename(main_protocol_file),
                    mime="text/plain",
                    use_container_width=True,
                    key="download_main_protocol"
                )
    
    with col2:
        st.success("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        if detailed_stats_file:
            with open(detailed_stats_file, "rb") as file:
                st.download_button(
                    label="üìà –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    data=file,
                    file_name=os.path.basename(detailed_stats_file),
                    mime="text/plain",
                    use_container_width=True,
                    key="download_detailed_stats"
                )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ
    if user_folder:
        st.info(f"üìÅ **–í—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ:** `{os.path.basename(user_folder)}`")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    st.write("---")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = st.session_state.user_info
    st.write("### üë§ –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ:")
    st.write(f"**–§–ò–û:** {user_info['last_name']} {user_info['first_name']} {user_info['middle_name']}")
    st.write(f"**–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {user_info['position']}")
    st.write(f"**–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {user_info['login_time']}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    st.write("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤", f"{protocol_data['results']['total_score']}/{protocol_data['results']['max_score']}")
    with col2:
        st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", f"{protocol_data['results']['percentage']}%")
    with col3:
        st.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è", protocol_data['results']['total_time_formatted'])
    with col4:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å", protocol_data['results']['average_time_formatted'])
    
    # –û—Ü–µ–Ω–∫–∞
    st.write("### üéØ –û—Ü–µ–Ω–∫–∞:")
    if protocol_data['results']['percentage'] >= 80:
        st.success("## üèÜ –û–¢–õ–ò–ß–ù–û - –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    elif protocol_data['results']['percentage'] >= 60:
        st.warning("## üëç –•–û–†–û–®–û - –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
    else:
        st.error("## üìö –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û - –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.")
    
    # –ö—Ä–∞—Ç–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    st.write("---")
    st.write("## üìù –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    
    for i, detail in enumerate(protocol_data['detailed_results'][:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞
        question = st.session_state.selected_questions[i]
        with st.expander(f"–í–æ–ø—Ä–æ—Å {detail['question_number']}: {detail['score']:.2f} –±–∞–ª–ª–∞ - {detail['time_formatted']}", expanded=False):
            st.write(f"**–í–æ–ø—Ä–æ—Å:** {question['question']}")
            st.write(f"**–í—Ä–µ–º—è:** {detail['time_formatted']}")
            st.write(f"**–ë–∞–ª–ª—ã:** {detail['score']:.2f} –∏–∑ 1.00")
            
            if detail['score'] == 1.0:
                st.success("‚úÖ –ü–æ–ª–Ω—ã–π –±–∞–ª–ª")
            elif detail['score'] > 0:
                st.warning(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ")
            else:
                st.error("‚ùå 0 –±–∞–ª–ª–æ–≤")
    
    if len(protocol_data['detailed_results']) > 3:
        st.info(f"*–ò –µ—â–µ {len(protocol_data['detailed_results']) - 3} –≤–æ–ø—Ä–æ—Å–æ–≤... –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Å–∫–∞—á–∏–≤–∞–µ–º–æ–º —Ñ–∞–π–ª–µ.*")
    
    # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    st.write("---")
    
    if st.button("üîÑ –ü—Ä–æ–π—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç", type="primary", use_container_width=True, key="new_test_button"):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –í–°–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º —Ç–µ—Å—Ç–æ–º
        keys_to_keep = ['user_info', 'user_logged_in', 'selected_theme', 'test_config']
        state_backup = {}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        for key in keys_to_keep:
            if key in st.session_state:
                state_backup[key] = st.session_state[key]
        
        # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ session_state
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        for key, value in state_backup.items():
            st.session_state[key] = value
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        initialize_session_state()
        st.rerun()

def main():
    st.title("‚úàÔ∏è –¢–µ—Å—Ç—ã –ø–æ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º")
    st.write("**–ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è** - –∫–∞–∂–¥—ã–π –§–ê–ü –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ")
    
    initialize_session_state()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    if not st.session_state.user_logged_in and not st.session_state.test_started:
        render_login_form()
        return
    
    if not st.session_state.test_started and not st.session_state.show_results:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = st.session_state.user_info
        st.success(f"üë§ **–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π:** {user_info['last_name']} {user_info['first_name']} {user_info['middle_name']} | **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {user_info['position']}")
        
        # –í—ã–±–æ—Ä —Ç–µ–º—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞
        render_question_selection()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º–∞—Ö
        st.write("---")
        st.write("### üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:")
        
        themes = load_themes()
        for theme_id, theme_data in themes.items():
            with st.expander(f"üìñ {theme_data['name']} - {theme_data.get('description', '')}"):
                st.write(f"**–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤:** {len(theme_data.get('questions', []))}")
                categories = get_categories_for_theme(themes, theme_id)
                if categories:
                    st.write("**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**", ", ".join(categories))
    
    elif st.session_state.test_started and not st.session_state.show_results:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        update_question_time()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        questions = st.session_state.selected_questions
        progress = (st.session_state.current_question + 1) / len(questions)
        st.progress(progress)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = st.session_state.user_info
        st.write(f"üë§ **{user_info['last_name']} {user_info['first_name'][0]}.{user_info['middle_name'][0] if user_info['middle_name'] else ''}** | üìö **–¢–µ–º–∞:** {st.session_state.selected_theme['name']} | **–í–æ–ø—Ä–æ—Å** {st.session_state.current_question + 1} –∏–∑ {len(questions)}")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_q = st.session_state.current_question
        question = questions[current_q]
        
        render_functions = {
            "single_choice": render_single_choice_question,
            "multiple_choice": render_multiple_choice_question,
            "dropdown": render_dropdown_question,
            "double_dropdown": render_double_dropdown_question,
            "ordering": render_ordering_question,
            "matching": render_matching_question
        }
        
        render_func = render_functions.get(question["type"])
        if render_func:
            render_func(question, current_q)
        else:
            st.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {question['type']}")
    
    elif st.session_state.show_results:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        render_results()
        
        st.write("---")
        col1, col2 = st.columns(2)
        with col1:
            # –ö–ù–û–ü–ö–ê "–ü–†–û–ô–¢–ò –¢–ï–°–¢ –ï–©–ï –†–ê–ó" - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç
            if st.button("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑", type="primary", use_container_width=True, key="one_more_test_button"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                if 'last_test_questions' in st.session_state and 'last_test_theme' in st.session_state:
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
                    st.session_state.test_started = True
                    st.session_state.test_finished = False
                    st.session_state.current_question = 0
                    st.session_state.score = 0
                    st.session_state.user_answers = {}
                    st.session_state.show_results = False
                    st.session_state.selected_questions = st.session_state.last_test_questions.copy()
                    st.session_state.selected_theme = st.session_state.last_test_theme
                    st.session_state.answers_checked = {}
                    st.session_state.question_times = [0] * len(st.session_state.last_test_questions)
                    st.session_state.question_scores = {}
                    st.session_state.question_start_time = time.time()
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö
                    if 'protocols_created' in st.session_state:
                        del st.session_state.protocols_created
                    if 'protocol_data' in st.session_state:
                        del st.session_state.protocol_data
                    if 'protocol_files' in st.session_state:
                        del st.session_state.protocol_files
                    
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
                
        with col2:
            if st.button("üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", use_container_width=True):
                # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
                for key in list(st.session_state.keys()):
                    del st.session_state[key]
                initialize_session_state()
                st.rerun()

if __name__ == "__main__":
    main()