# /home/maksim/–î–æ–∫—É–º–µ–Ω—Ç—ã/DMA/fap_test_system/question_editor.py
import streamlit as st
import json
import os
import sys
import random
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))
from theme_loader import scan_themes, save_theme

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–†–µ–¥–∞–∫—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤",
    page_icon="‚úèÔ∏è",
    layout="wide"
)

def initialize_editor_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    if 'current_theme' not in st.session_state:
        st.session_state.current_theme = None
    if 'editing_question' not in st.session_state:
        st.session_state.editing_question = None
    if 'question_options' not in st.session_state:
        st.session_state.question_options = [
            {"text": "", "is_correct": False},
            {"text": "", "is_correct": False},
            {"text": "", "is_correct": False},
            {"text": "", "is_correct": False}
        ]
    if 'quick_options_text' not in st.session_state:
        st.session_state.quick_options_text = ""
    if 'question_type' not in st.session_state:
        st.session_state.question_type = "single_choice"
    if 'ordering_items' not in st.session_state:
        st.session_state.ordering_items = [""]
    if 'matching_pairs' not in st.session_state:
        st.session_state.matching_pairs = [
            {"left": "", "right": ""},
            {"left": "", "right": ""},
            {"left": "", "right": ""}
        ]

def show_theme_selector():
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    st.header("üìö –í—ã–±–æ—Ä —Ç–µ–º—ã")
    
    themes = scan_themes()
    if not themes:
        st.error("‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–º—É.")
        return None
    
    theme_options = {theme_id: f"{data['name']} ({len(data.get('questions', []))} –≤–æ–ø—Ä–æ—Å–æ–≤)" 
                    for theme_id, data in themes.items()}
    
    selected_theme = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        options=list(theme_options.keys()),
        format_func=lambda x: theme_options[x]
    )
    
    return themes[selected_theme] if selected_theme else None

def manage_options():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å —É–¥–æ–±–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    st.subheader("üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")
    st.write("**–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ:**")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö
    st.write("### –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:")
    
    options_to_remove = []
    
    for i, option in enumerate(st.session_state.question_options):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        with st.container():
            st.write(f"---")
            col1, col2, col3 = st.columns([6, 2, 1])
            
            with col1:
                # –ë–æ–ª—å—à–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
                option_text = st.text_area(
                    f"**–í–∞—Ä–∏–∞–Ω—Ç {i+1}:**",
                    value=option['text'],
                    height=80,  # –í—ã—Å–æ—Ç–∞ –ø–æ–ª—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    placeholder=f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i+1}...\n–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫",
                    key=f"option_text_{i}",
                    help="–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç"
                )
            
            with col2:
                st.write("")  # –û—Ç—Å—Ç—É–ø –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                st.write("")
                # –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                if st.session_state.question_type == "single_choice":
                    # –î–ª—è –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - radio button
                    is_correct = st.radio(
                        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                        [False, True],
                        index=1 if option['is_correct'] else 0,
                        key=f"correct_{i}",
                        horizontal=True
                    )
                else:
                    # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ - checkbox
                    is_correct = st.checkbox(
                        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π",
                        value=option['is_correct'],
                        key=f"correct_{i}"
                    )
            
            with col3:
                st.write("")  # –û—Ç—Å—Ç—É–ø –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                st.write("")
                # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 2 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
                if len(st.session_state.question_options) > 2:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_opt_{i}", use_container_width=True):
                        options_to_remove.append(i)
                else:
                    st.write("")  # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            st.session_state.question_options[i] = {"text": option_text, "is_correct": is_correct}
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç—ã
    for i in sorted(options_to_remove, reverse=True):
        st.session_state.question_options.pop(i)
    
    if options_to_remove:
        st.rerun()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    st.write("---")
    col1, col2 = st.columns([3, 1])
    
    with col2:
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç", use_container_width=True, icon="‚ûï"):
            st.session_state.question_options.append({"text": "", "is_correct": False})
            st.rerun()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    valid_options = [opt for opt in st.session_state.question_options if opt['text'].strip()]
    st.info(f"üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(valid_options)} –∏–∑ {len(st.session_state.question_options)}")
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é
    with st.expander("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é", expanded=False):
        st.write("""
        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
        - –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å **–æ–¥–Ω–∏–º –æ—Ç–≤–µ—Ç–æ–º** –æ—Ç–º–µ—Ç—å—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ò–ù –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        - –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å **–Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏** –º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
        - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: 2
        - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
        - –ü—É—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        """)

def manage_matching_options():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ç–∏–ø–∞ matching —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    st.subheader("üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if 'matching_pairs' not in st.session_state:
        st.session_state.matching_pairs = [
            {"left": "", "right": ""},
            {"left": "", "right": ""},
            {"left": "", "right": ""}
        ]
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
    all_right_options = set()
    for pair in st.session_state.matching_pairs:
        if pair['right'].strip():
            all_right_options.add(pair['right'])
    all_right_options = sorted(list(all_right_options))
    
    st.write("### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:")
    
    pairs_to_remove = []
    
    for i, pair in enumerate(st.session_state.matching_pairs):
        st.write(f"**–ü–∞—Ä–∞ {i+1}:**")
        col1, col2, col3 = st.columns([5, 5, 1])
        
        with col1:
            # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            left_value = st.text_area(
                "–≠–ª–µ–º–µ–Ω—Ç –ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞:",
                value=pair['left'],
                height=100,  # –í—ã—Å–æ—Ç–∞ –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                placeholder="–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞...\n–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫",
                key=f"matching_left_{i}",
                help="–û–±—ã—á–Ω–æ —Ç–µ—Ä–º–∏–Ω, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ"
            )
        
        with col2:
            # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
            st.write("–≠–ª–µ–º–µ–Ω—Ç –ø—Ä–∞–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞:")
            
            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            new_right_value = st.text_area(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                value=pair['right'] if pair['right'] not in all_right_options else "",
                height=80,
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∏–∂–µ",
                key=f"matching_right_new_{i}",
                help="–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö"
            )
            
            # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            if all_right_options:
                selected_existing = st.selectbox(
                    "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö:",
                    options=["-- –í–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ --"] + all_right_options,
                    index=all_right_options.index(pair['right']) + 1 if pair['right'] in all_right_options else 0,
                    key=f"matching_right_select_{i}"
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if selected_existing != "-- –í–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ --":
                    final_right_value = selected_existing
                else:
                    final_right_value = new_right_value
            else:
                final_right_value = new_right_value
        
        with col3:
            st.write("")  # –û—Ç—Å—Ç—É–ø
            st.write("")
            if len(st.session_state.matching_pairs) > 2:
                if st.button("üóëÔ∏è", key=f"delete_matching_{i}", use_container_width=True):
                    pairs_to_remove.append(i)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—É
        st.session_state.matching_pairs[i] = {
            "left": left_value,
            "right": final_right_value
        }
        
        st.write("---")
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
    for i in sorted(pairs_to_remove, reverse=True):
        st.session_state.matching_pairs.pop(i)
    
    if pairs_to_remove:
        st.rerun()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä
    st.write("**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–∏:**")
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", use_container_width=True, icon="‚ûï"):
            st.session_state.matching_pairs.append({"left": "", "right": ""})
            st.rerun()
    
    with col2:
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã", use_container_width=True):
            st.session_state.matching_pairs = [
                {"left": "", "right": ""},
                {"left": "", "right": ""},
                {"left": "", "right": ""}
            ]
            st.rerun()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    valid_pairs = [p for p in st.session_state.matching_pairs if p['left'].strip() and p['right'].strip()]
    
    st.info(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–∞—Ä: {len(valid_pairs)} –∏–∑ {len(st.session_state.matching_pairs)}")
    
    if len(valid_pairs) < 2:
        st.error("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 –ø–∞—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è!")
    
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    if valid_pairs:
        st.write("### –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π:")
        for i, pair in enumerate(valid_pairs):
            with st.expander(f"–ü–∞—Ä–∞ {i+1}: {pair['left'][:50]}... ‚Üí {pair['right'][:50]}...", expanded=False):
                col1, col2 = st.columns(2)
                with col1:
                    st.write("**–õ–µ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç:**")
                    st.info(pair['left'])
                with col2:
                    st.write("**–ü—Ä–∞–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç:**")
                    st.success(pair['right'])
def manage_double_dropdown_options():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è double_dropdown —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    st.subheader("üß© –ü–æ–¥–≤–æ–ø—Ä–æ—Å—ã —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–≤–æ–ø—Ä–æ—Å–æ–≤
    if 'subquestions' not in st.session_state:
        st.session_state.subquestions = []
    
    # –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥–≤–æ–ø—Ä–æ—Å", expanded=True):
        st.write("**–ù–æ–≤—ã–π –ø–æ–¥–≤–æ–ø—Ä–æ—Å:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞
            new_subq_text = st.text_area(
                "–¢–µ–∫—Å—Ç –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞:*",
                height=80,
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞...\n–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫",
                key="new_subq_text"
            )
            
            # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            new_subq_options = st.text_area(
                "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):*",
                height=100,
                placeholder="–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n–¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n...",
                key="new_subq_options",
                help="–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
            )
        
        with col2:
            new_subq_key = st.text_input(
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–ª—é—á:*", 
                placeholder="primary_radar",
                key="new_subq_key",
                help="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"
            )
            
            if new_subq_options:
                options_list = [opt.strip() for opt in new_subq_options.split('\n') if opt.strip()]
                if options_list:
                    new_subq_correct = st.selectbox(
                        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:*", 
                        options_list,
                        key="new_subq_correct"
                    )
                else:
                    new_subq_correct = None
                    st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞!")
            else:
                new_subq_correct = None
        
        if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–≤–æ–ø—Ä–æ—Å", key="add_subq", use_container_width=True):
            if all([new_subq_text.strip(), new_subq_key.strip(), new_subq_options.strip(), new_subq_correct]):
                st.session_state.subquestions.append({
                    "text": new_subq_text.strip(),
                    "key": new_subq_key.strip(),
                    "options": [opt.strip() for opt in new_subq_options.split('\n') if opt.strip()],
                    "correct": new_subq_correct
                })
                st.rerun()
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞!")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–≤–æ–ø—Ä–æ—Å–æ–≤
    if st.session_state.subquestions:
        st.write("---")
        st.write("**–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–≤–æ–ø—Ä–æ—Å—ã:**")
        
        for i, subq in enumerate(st.session_state.subquestions):
            with st.expander(f"üìã –ü–æ–¥–≤–æ–ø—Ä–æ—Å {i+1}: {subq['text'][:50]}...", expanded=False):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write("**–¢–µ–∫—Å—Ç –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞:**")
                    st.info(subq['text'])
                    st.write(f"**–ö–ª—é—á:** `{subq['key']}`")
                    st.write("**–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:**")
                    for opt in subq['options']:
                        st.write(f"- {opt}")
                    st.write(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** `{subq['correct']}`")
                
                with col2:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_subq_{i}", use_container_width=True):
                        st.session_state.subquestions.pop(i)
                        st.rerun()
    else:
        st.info("üìù –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–¥–≤–æ–ø—Ä–æ—Å")

def manage_ordering_options():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è"""
    st.subheader("üî¢ –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è")
    
    if 'ordering_items' not in st.session_state:
        st.session_state.ordering_items = [""]
    
    # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    quick_ordering = st.text_area(
        "–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):",
        placeholder="–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø\n–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø\n–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–ø\n...",
        help="–≠–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ",
        key="quick_ordering"
    )
    
    if quick_ordering:
        items_list = [item.strip() for item in quick_ordering.split('\n') if item.strip()]
        st.session_state.ordering_items = items_list
    
    # –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    if not quick_ordering:
        st.write("**–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É:**")
        
        for i, item in enumerate(st.session_state.ordering_items):
            col1, col2 = st.columns([5, 1])
            with col1:
                new_item = st.text_input(
                    f"–≠–ª–µ–º–µ–Ω—Ç {i+1}",
                    value=item,
                    key=f"ordering_item_{i}",
                    placeholder=f"–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç {i+1}..."
                )
                st.session_state.ordering_items[i] = new_item
            
            with col2:
                if len(st.session_state.ordering_items) > 1:
                    if st.button("üóëÔ∏è", key=f"delete_ordering_{i}"):
                        st.session_state.ordering_items.pop(i)
                        st.rerun()
        
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç", key="add_ordering_item"):
            st.session_state.ordering_items.append("")
            st.rerun()
    
    # –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—è–¥–∫–∞
    if st.session_state.ordering_items and any(st.session_state.ordering_items):
        st.write("---")
        st.write("**–ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–æ–∫:**")
        for i, item in enumerate(st.session_state.ordering_items):
            if item.strip():  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                st.write(f"{i+1}. {item}")

def show_question_form(theme):
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    st.header("‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    col1, col2 = st.columns(2)
    
    with col1:
        question_text = st.text_area("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:*", height=100,
                                   placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞...",
                                   key="question_text")
        category = st.text_input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:*", 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–æ–≤",
                               key="category")
    
    with col2:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –≤ session_state
        st.session_state.question_type = st.selectbox("–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞:*", [
            "single_choice", "multiple_choice", "dropdown", 
            "double_dropdown", "ordering", "matching"
        ], key="question_type_select")
        
        explanation = st.text_area("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:*", height=100,
                                 placeholder="–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...",
                                 key="explanation")
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    if st.session_state.question_type == "double_dropdown":
        manage_double_dropdown_options()
    elif st.session_state.question_type == "ordering":
        manage_ordering_options()
    elif st.session_state.question_type == "matching":
        manage_matching_options()
    else:
        manage_options()  # single_choice, multiple_choice, dropdown
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns([2, 1, 1])
    with col2:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", use_container_width=True, type="primary"):
            process_question_submission(
                theme, 
                question_text, 
                st.session_state.question_type, 
                category, 
                explanation
            )
    
    with col3:
        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É", use_container_width=True):
            safe_clear_form()
            st.rerun()

def safe_clear_form():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã 4 –ø–æ–ª–µ–π"""
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    st.session_state.question_options = [
        {"text": "", "is_correct": False},
        {"text": "", "is_correct": False},
        {"text": "", "is_correct": False}, 
        {"text": "", "is_correct": False}
    ]
    st.session_state.matching_pairs = [
        {"left": "", "right": ""},
        {"left": "", "right": ""},
        {"left": "", "right": ""}
    ]
    st.session_state.quick_options_text = ""
    st.session_state.ordering_items = [""]
    if 'subquestions' in st.session_state:
        st.session_state.subquestions = []
    
    st.success("‚úÖ –§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")

def process_question_submission(theme, question_text, question_type, category, explanation):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    if not all([question_text, category, explanation]):
        st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
        return False
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    if question_type == "matching":
        valid_pairs = [p for p in st.session_state.matching_pairs if p['left'].strip() and p['right'].strip()]
        if len(valid_pairs) < 2:
            st.error("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 –ø–∞—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è matching –≤–æ–ø—Ä–æ—Å–∞
        left_column = [pair['left'] for pair in valid_pairs]
        right_column = list(set([pair['right'] for pair in valid_pairs]))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        
        correct_mapping = {}
        for pair in valid_pairs:
            correct_mapping[pair['left']] = pair['right']
        
        new_question = {
            "id": len(theme.get('questions', [])) + 1,
            "type": question_type,
            "question": question_text,
            "left_column": left_column,
            "right_column": right_column,
            "correct_mapping": correct_mapping,
            "explanation": explanation,
            "category": category
        }
    
    elif question_type == "double_dropdown":
        if 'subquestions' not in st.session_state or not st.session_state.subquestions:
            st.error("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–¥–≤–æ–ø—Ä–æ—Å!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–¥–≤–æ–ø—Ä–æ—Å—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        for i, subq in enumerate(st.session_state.subquestions):
            if not all([subq['text'], subq['key'], subq['options'], subq['correct']]):
                st.error(f"‚ùå –ü–æ–¥–≤–æ–ø—Ä–æ—Å {i+1} –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é!")
                return False
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å double_dropdown
        new_question = {
            "id": len(theme.get('questions', [])) + 1,
            "type": question_type,
            "question": question_text,
            "subquestions": st.session_state.subquestions.copy(),
            "explanation": explanation,
            "category": category
        }
        
    elif question_type == "ordering":
        valid_items = [item.strip() for item in st.session_state.ordering_items if item.strip()]
        if len(valid_items) < 2:
            st.error("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è!")
            return False
        
        new_question = {
            "id": len(theme.get('questions', [])) + 1,
            "type": question_type,
            "question": question_text,
            "items": valid_items,
            "correct_order": valid_items,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            "explanation": explanation,
            "category": category
        }
        
    else:  # single_choice, multiple_choice, dropdown
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        valid_options = [opt for opt in st.session_state.question_options if opt['text'].strip()]
        if len(valid_options) < 2:
            st.error("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if question_type == "single_choice":
            correct_options = [opt['text'] for opt in valid_options if opt['is_correct']]
            if len(correct_options) != 1:
                st.error("‚ùå –î–ª—è —Ç–∏–ø–∞ '–û–¥–∏–Ω –æ—Ç–≤–µ—Ç' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –†–û–í–ù–û –û–î–ò–ù –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
                return False
            correct_answer = correct_options[0]
        else:  # multiple_choice, dropdown
            correct_options = [opt['text'] for opt in valid_options if opt['is_correct']]
            if not correct_options:
                st.error("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
                return False
            correct_answer = correct_options
        
        new_question = {
            "id": len(theme.get('questions', [])) + 1,
            "type": question_type,
            "question": question_text,
            "options": [opt['text'] for opt in valid_options],
            "correct": correct_answer,
            "explanation": explanation,
            "category": category
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–º—É
    if 'questions' not in theme:
        theme['questions'] = []
    theme['questions'].append(new_question)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    if save_theme(theme['id'], theme):
        st.success(f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ–º—É '{theme['name']}'!")
        safe_clear_form()
        return True
    else:
        st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞!")
        return False

def show_existing_questions(theme):
    """–ü–æ–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    if not theme.get('questions'):
        st.info("üìù –í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
        return
    
    st.header("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
    
    for i, question in enumerate(theme['questions']):
        with st.expander(f"‚ùì {question['question'][:50]}...", expanded=False):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.write(f"**–¢–∏–ø:** {question['type']}")
                st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {question.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
                if question['type'] == 'double_dropdown':
                    st.write("**–ü–æ–¥–≤–æ–ø—Ä–æ—Å—ã:**")
                    for subq in question.get('subquestions', []):
                        st.write(f"- {subq['text']}: {subq['correct']}")
                        
                elif question['type'] == 'matching':
                    st.write("**–ü–∞—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:**")
                    for left_item, right_item in question.get('correct_mapping', {}).items():
                        st.write(f"- {left_item} ‚Üí {right_item}")
                        
                elif question['type'] == 'ordering':
                    st.write(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫:** {', '.join(question.get('correct_order', []))}")
                    
                else:  # single_choice, multiple_choice, dropdown
                    st.write(f"**–í–∞—Ä–∏–∞–Ω—Ç—ã:** {', '.join(question.get('options', []))}")
                    # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–ø–æ–≤ —Å –ø–æ–ª–µ–º 'correct'
                    if 'correct' in question:
                        if question['type'] == 'multiple_choice':
                            st.write(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:** {', '.join(question['correct'])}")
                        else:
                            st.write(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {question['correct']}")
                
                st.write(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question.get('explanation', '–ù–µ—Ç')}")
            
            with col2:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{i}", use_container_width=True):
                    theme['questions'].pop(i)
                    if save_theme(theme['id'], theme):
                        st.success("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!")
                        st.rerun()
                    break

def main():
    st.title("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤")
    st.write("–£–¥–æ–±–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
    
    initialize_editor_state()
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã
    theme = show_theme_selector()
    if not theme:
        return
    
    st.session_state.current_theme = theme
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
    st.success(f"üìö –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–º—É: **{theme['name']}**")
    st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {theme.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
    st.write(f"**–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:** {len(theme.get('questions', []))}")
    
    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    show_question_form(theme)
    
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    show_existing_questions(theme)

if __name__ == "__main__":
    main()        