# /home/maksim/–î–æ–∫—É–º–µ–Ω—Ç—ã/DMA/fap_test_system/utils/theme_loader.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º (–§–ê–ü–æ–≤) –∏–∑ –ø–∞–ø–∫–∏ themes/
"""
import os
import json
import glob
from typing import Dict, List, Any

def scan_themes() -> Dict[str, Any]:
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É themes/ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ .json —Ñ–∞–π–ª—ã –∫–∞–∫ —Ç–µ–º—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–º–∞–º–∏
    """
    themes = {}
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ themes
    current_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(current_dir)
    themes_dir = os.path.join(project_root, "themes")
    
    print(f"üîç –ò—â–µ–º —Ç–µ–º—ã –≤ –ø–∞–ø–∫–µ: {themes_dir}")
    
    theme_files = glob.glob(os.path.join(themes_dir, "*.json"))
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {theme_files}")
    
    for theme_file in theme_files:
        try:
            with open(theme_file, 'r', encoding='utf-8') as f:
                theme_data = json.load(f)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (fap297.json -> fap297)
            theme_id = os.path.basename(theme_file).replace('.json', '')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ —Å–ª–æ–≤–∞—Ä—å
            themes[theme_id] = theme_data
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–µ–º–∞: {theme_data.get('name', theme_id)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º—ã {theme_file}: {e}")
    
    return themes

def get_categories_for_theme(themes: Dict, theme_id: str) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã"""
    if theme_id not in themes:
        return []
    
    categories = set()
    for question in themes[theme_id].get('questions', []):
        if question.get('category'):
            categories.add(question['category'])
    
    return sorted(list(categories))

def save_theme(theme_id: str, theme_data: Dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–º—É –≤ —Ñ–∞–π–ª"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ themes
        current_dir = os.path.dirname(os.path.abspath(__file__))
        project_root = os.path.dirname(current_dir)
        themes_dir = os.path.join(project_root, "themes")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(themes_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        theme_path = os.path.join(themes_dir, f"{theme_id}.json")
        with open(theme_path, 'w', encoding='utf-8') as f:
            json.dump(theme_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –¢–µ–º–∞ '{theme_id}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {theme_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º—ã {theme_id}: {e}")
        return False